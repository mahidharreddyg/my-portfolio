"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/n8ao";
exports.ids = ["vendor-chunks/n8ao"];
exports.modules = {

/***/ "(ssr)/./node_modules/n8ao/dist/N8AO.js":
/*!****************************************!*\
  !*** ./node_modules/n8ao/dist/N8AO.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DepthType: () => (/* binding */ $05f6997e4b65da14$export$ed4ee5d1e55474a5),\n/* harmony export */   N8AOPass: () => (/* binding */ $05f6997e4b65da14$export$2d57db20b5eb5e0a),\n/* harmony export */   N8AOPostPass: () => (/* binding */ $87431ee93b037844$export$2489f9981ab0fa82)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/postprocessing/Pass.js */ \"(ssr)/./node_modules/three/examples/jsm/postprocessing/Pass.js\");\n/* harmony import */ var postprocessing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! postprocessing */ \"(ssr)/./node_modules/postprocessing/build/index.js\");\n\n\n\n\n\n\n\nclass $e4ca8dcb0218f846$var$FullScreenTriangleGeometry extends three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry {\n    boundingSphere = new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\n    constructor(){\n        super();\n        this.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(new Float32Array([\n            -1,\n            -1,\n            3,\n            -1,\n            -1,\n            3\n        ]), 2));\n        this.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(new Float32Array([\n            0,\n            0,\n            2,\n            0,\n            0,\n            2\n        ]), 2));\n    }\n    computeBoundingSphere() {}\n}\nconst $e4ca8dcb0218f846$var$_geometry = /* @__PURE__ */ new $e4ca8dcb0218f846$var$FullScreenTriangleGeometry();\nconst $e4ca8dcb0218f846$var$_camera = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera();\nclass $e4ca8dcb0218f846$export$dcd670d73db751f5 {\n    constructor(material){\n        this._mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh($e4ca8dcb0218f846$var$_geometry, material);\n        this._mesh.frustumCulled = false;\n    }\n    render(renderer) {\n        renderer.render(this._mesh, $e4ca8dcb0218f846$var$_camera);\n    }\n    get material() {\n        return this._mesh.material;\n    }\n    set material(value) {\n        this._mesh.material = value;\n    }\n    dispose() {\n        this._mesh.material.dispose();\n        this._mesh.geometry.dispose();\n    }\n}\n\n\n\nconst $1ed45968c1160c3c$export$c9b263b9a17dffd7 = {\n    uniforms: {\n        \"sceneDiffuse\": {\n            value: null\n        },\n        \"sceneDepth\": {\n            value: null\n        },\n        \"sceneNormal\": {\n            value: null\n        },\n        \"projMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"viewMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"projViewMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"projectionMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"viewMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"cameraPos\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3()\n        },\n        \"resolution\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()\n        },\n        \"biasAdjustment\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()\n        },\n        \"time\": {\n            value: 0.0\n        },\n        \"samples\": {\n            value: []\n        },\n        \"bluenoise\": {\n            value: null\n        },\n        \"distanceFalloff\": {\n            value: 1.0\n        },\n        \"radius\": {\n            value: 5.0\n        },\n        \"near\": {\n            value: 0.1\n        },\n        \"far\": {\n            value: 1000.0\n        },\n        \"ortho\": {\n            value: false\n        },\n        \"screenSpaceRadius\": {\n            value: false\n        },\n        \"frame\": {\n            value: 0.0\n        }\n    },\n    depthWrite: false,\n    depthTest: false,\n    vertexShader: /* glsl */ `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 1);\n}`,\n    fragmentShader: /* glsl */ `\n    #define SAMPLES 16\n    #define FSAMPLES 16.0\nuniform sampler2D sceneDiffuse;\nuniform highp sampler2D sceneNormal;\nuniform highp sampler2D sceneDepth;\nuniform mat4 projectionMatrixInv;\nuniform mat4 viewMatrixInv;\nuniform mat4 projMat;\nuniform mat4 viewMat;\nuniform mat4 projViewMat;\nuniform vec3 cameraPos;\nuniform vec2 resolution;\nuniform vec2 biasAdjustment;\nuniform float time;\nuniform vec3[SAMPLES] samples;\nuniform float radius;\nuniform float distanceFalloff;\nuniform float near;\nuniform float far;\nuniform float frame;\nuniform bool ortho;\nuniform bool screenSpaceRadius;\nuniform sampler2D bluenoise;\n    varying vec2 vUv;\n    highp float linearize_depth(highp float d, highp float zNear,highp float zFar)\n    {\n        return (zFar * zNear) / (zFar - d * (zFar - zNear));\n    }\n    highp float linearize_depth_ortho(highp float d, highp float nearZ, highp float farZ) {\n      return nearZ + (farZ - nearZ) * d;\n    }\n    highp float linearize_depth_log(highp float d, highp float nearZ,highp float farZ) {\n      float depth = pow(2.0, d * log2(farZ + 1.0)) - 1.0;\n      float a = farZ / (farZ - nearZ);\n      float b = farZ * nearZ / (nearZ - farZ);\n      float linDepth = a + b / depth;\n      /*return ortho ? linearize_depth_ortho(\n        linDepth,\n        nearZ,\n        farZ\n      ) :linearize_depth(linDepth, nearZ, farZ);*/\n       #ifdef ORTHO\n\n       return linearize_depth_ortho(d, nearZ, farZ);\n\n        #else\n        return linearize_depth(linDepth, nearZ, farZ);\n        #endif\n    }\n\n    vec3 getWorldPosLog(vec3 posS) {\n      vec2 uv = posS.xy;\n      float z = posS.z;\n      float nearZ =near;\n      float farZ = far;\n      float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n      float a = farZ / (farZ - nearZ);\n      float b = farZ * nearZ / (nearZ - farZ);\n      float linDepth = a + b / depth;\n      vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n      vec4 wpos = projectionMatrixInv * clipVec;\n      return wpos.xyz / wpos.w;\n    }\n    vec3 getWorldPos(float depth, vec2 coord) {\n      #ifdef LOGDEPTH\n        #ifndef ORTHO\n          return getWorldPosLog(vec3(coord, depth));\n        #endif\n      #endif\n      float z = depth * 2.0 - 1.0;\n      vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n      vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n      // Perspective division\n     vec4 worldSpacePosition = viewSpacePosition;\n     worldSpacePosition.xyz /= worldSpacePosition.w;\n      return worldSpacePosition.xyz;\n  }\n\n  vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n    ivec2 p = ivec2(vUv * resolution);\n    #ifdef REVERSEDEPTH\n    float c0 = 1.0 - texelFetch(sceneDepth, p, 0).x;\n    float l2 = 1.0 - texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n    float l1 = 1.0 - texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n    float r1 = 1.0 - texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n    float r2 = 1.0 - texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n    float b2 = 1.0 - texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n    float b1 = 1.0 - texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n    float t1 = 1.0 - texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n    float t2 = 1.0 - texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n    #else\n    float c0 = texelFetch(sceneDepth, p, 0).x;\n    float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n    float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n    float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n    float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n    float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n    float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n    float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n    float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n    #endif\n\n    float dl = abs((2.0 * l1 - l2) - c0);\n    float dr = abs((2.0 * r1 - r2) - c0);\n    float db = abs((2.0 * b1 - b2) - c0);\n    float dt = abs((2.0 * t1 - t2) - c0);\n\n    vec3 ce = getWorldPos(c0, vUv).xyz;\n\n    vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                          : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n    vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                          : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n\n    return normalize(cross(dpdx, dpdy));\n}\n\nmat3 makeRotationZ(float theta) {\n\tfloat c = cos(theta);\n\tfloat s = sin(theta);\n\treturn mat3(c, - s, 0,\n\t\t\ts,  c, 0,\n\t\t\t0,  0, 1);\n  }\n\nvoid main() {\n      vec4 diffuse = texture2D(sceneDiffuse, vUv);\n      #ifdef REVERSEDEPTH\n      float depth = 1.0 - texture2D(sceneDepth, vUv).x;\n      #else\n      float depth = texture2D(sceneDepth, vUv).x;\n      #endif\n      if (depth == 1.0) {\n        gl_FragColor = vec4(vec3(1.0), 1.0);\n        return;\n      }\n      vec3 worldPos = getWorldPos(depth, vUv);\n      #ifdef HALFRES\n        vec3 normal = texture2D(sceneNormal, vUv).rgb;\n      #else\n        vec3 normal = computeNormal(worldPos, vUv);\n      #endif\n      vec4 noise = texture2D(bluenoise, gl_FragCoord.xy / 128.0);\n      vec2 harmoniousNumbers = vec2(\n        1.618033988749895,\n        1.324717957244746\n      );\n      noise.rg += harmoniousNumbers * frame;\n      noise.rg = fract(noise.rg);\n        vec3 helperVec = vec3(0.0, 1.0, 0.0);\n        if (dot(helperVec, normal) > 0.99) {\n          helperVec = vec3(1.0, 0.0, 0.0);\n        }\n        vec3 tangent = normalize(cross(helperVec, normal));\n        vec3 bitangent = cross(normal, tangent);\n        mediump mat3 tbn = mat3(tangent, bitangent, normal) *  makeRotationZ( noise.r * 3.1415962 * 2.0) ;\n\n      mediump float occluded = 0.0;\n      mediump float totalWeight = 0.0;\n      float radiusToUse = screenSpaceRadius ? distance(\n        worldPos,\n        getWorldPos(depth, vUv +\n          vec2(radius, 0.0) / resolution)\n      ) : radius;\n      float distanceFalloffToUse =screenSpaceRadius ?\n          radiusToUse * distanceFalloff\n      : radiusToUse * distanceFalloff * 0.2;\n      float bias = (min(\n        0.1,\n        distanceFalloffToUse * 0.1\n      ) / near) * fwidth(distance(worldPos, cameraPos)) / radiusToUse;\n      bias = biasAdjustment.x + biasAdjustment.y * bias;\n      mediump float offsetMove = noise.g;\n      mediump float offsetMoveInv = 1.0 / FSAMPLES;\n      float farTimesNear = far * near;\n      float farMinusNear = far - near;\n      \n      for(int i = 0; i < SAMPLES; i++) {\n        mediump vec3 sampleDirection = tbn * samples[i];\n\n        float moveAmt = fract(offsetMove);\n        offsetMove += offsetMoveInv;\n        vec3 samplePos = worldPos + radiusToUse * moveAmt * sampleDirection;\n        vec4 offset = projMat * vec4(samplePos, 1.0);\n        offset.xyz /= offset.w;\n        offset.xyz = offset.xyz * 0.5 + 0.5;\n        \n        if (all(greaterThan(offset.xyz * (1.0 - offset.xyz), vec3(0.0)))) {\n          #ifdef REVERSEDEPTH\n          float sampleDepth = 1.0 - textureLod(sceneDepth, offset.xy, 0.0).x;\n          #else\n          float sampleDepth = textureLod(sceneDepth, offset.xy, 0.0).x;\n          #endif\n\n          /*#ifdef LOGDEPTH\n          float distSample = linearize_depth_log(sampleDepth, near, far);\n      #else\n          #ifdef ORTHO\n              float distSample = near + farMinusNear * sampleDepth;\n          #else\n              float distSample = (farTimesNear) / (far - sampleDepth * farMinusNear);\n          #endif\n      #endif*/\n      #ifdef ORTHO\n          float distSample = near + sampleDepth * farMinusNear;\n      #else\n          #ifdef LOGDEPTH\n              float distSample = linearize_depth_log(sampleDepth, near, far);\n          #else\n              float distSample = (farTimesNear) / (far - sampleDepth * farMinusNear);\n          #endif\n      #endif\n      \n      #ifdef ORTHO\n          float distWorld = near + offset.z * farMinusNear;\n      #else\n          float distWorld = (farTimesNear) / (far - offset.z * farMinusNear);\n      #endif\n          \n          mediump float rangeCheck = smoothstep(0.0, 1.0, distanceFalloffToUse / (abs(distSample - distWorld)));\n          vec2 diff = gl_FragCoord.xy - floor(offset.xy * resolution);\n          occluded += rangeCheck * float(distSample != distWorld) * float(sampleDepth != depth) * step(distSample + bias, distWorld) * step(\n            1.0,\n            dot(diff, diff)\n          );\n          \n          totalWeight ++;\n        }\n      }\n      float occ = clamp(1.0 - occluded / (totalWeight == 0.0 ? 1.0 : totalWeight), 0.0, 1.0);\n      gl_FragColor = vec4(occ, 0.5 + 0.5 * normal);\n}`\n};\n\n\n\nconst $12b21d24d1192a04$export$a815acccbd2c9a49 = {\n    uniforms: {\n        \"sceneDiffuse\": {\n            value: null\n        },\n        \"sceneDepth\": {\n            value: null\n        },\n        \"tDiffuse\": {\n            value: null\n        },\n        \"transparencyDWFalse\": {\n            value: null\n        },\n        \"transparencyDWTrue\": {\n            value: null\n        },\n        \"transparencyDWTrueDepth\": {\n            value: null\n        },\n        \"transparencyAware\": {\n            value: false\n        },\n        \"projMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"viewMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"projectionMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"viewMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"cameraPos\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3()\n        },\n        \"resolution\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()\n        },\n        \"color\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0)\n        },\n        \"blueNoise\": {\n            value: null\n        },\n        \"downsampledDepth\": {\n            value: null\n        },\n        \"time\": {\n            value: 0.0\n        },\n        \"intensity\": {\n            value: 10.0\n        },\n        \"renderMode\": {\n            value: 0.0\n        },\n        \"gammaCorrection\": {\n            value: false\n        },\n        \"ortho\": {\n            value: false\n        },\n        \"near\": {\n            value: 0.1\n        },\n        \"far\": {\n            value: 1000.0\n        },\n        \"screenSpaceRadius\": {\n            value: false\n        },\n        \"radius\": {\n            value: 0.0\n        },\n        \"distanceFalloff\": {\n            value: 1.0\n        },\n        \"fog\": {\n            value: false\n        },\n        \"fogExp\": {\n            value: false\n        },\n        \"fogDensity\": {\n            value: 0.0\n        },\n        \"fogNear\": {\n            value: Infinity\n        },\n        \"fogFar\": {\n            value: Infinity\n        },\n        \"colorMultiply\": {\n            value: true\n        },\n        \"aoTones\": {\n            value: 0.0\n        }\n    },\n    depthWrite: false,\n    depthTest: false,\n    vertexShader: /* glsl */ `\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = vec4(position, 1);\n\t\t}`,\n    fragmentShader: /* glsl */ `\n\t\tuniform sampler2D sceneDiffuse;\n    uniform highp sampler2D sceneDepth;\n    uniform highp sampler2D downsampledDepth;\n    uniform highp sampler2D transparencyDWFalse;\n    uniform highp sampler2D transparencyDWTrue;\n    uniform highp sampler2D transparencyDWTrueDepth;\n    uniform sampler2D tDiffuse;\n    uniform sampler2D blueNoise;\n    uniform vec2 resolution;\n    uniform vec3 color;\n    uniform mat4 projectionMatrixInv;\n    uniform mat4 viewMatrixInv;\n    uniform float intensity;\n    uniform float renderMode;\n    uniform float near;\n    uniform float far;\n    uniform float aoTones;\n    uniform bool gammaCorrection;\n    uniform bool ortho;\n    uniform bool screenSpaceRadius;\n    uniform bool fog;\n    uniform bool fogExp;\n    uniform bool colorMultiply;\n    uniform bool transparencyAware;\n    uniform float fogDensity;\n    uniform float fogNear;\n    uniform float fogFar;\n    uniform float radius;\n    uniform float distanceFalloff;\n    uniform vec3 cameraPos;\n    varying vec2 vUv;\n    highp float linearize_depth(highp float d, highp float zNear,highp float zFar)\n    {\n        return (zFar * zNear) / (zFar - d * (zFar - zNear));\n    }\n    highp float linearize_depth_ortho(highp float d, highp float nearZ, highp float farZ) {\n      return nearZ + (farZ - nearZ) * d;\n    }\n    highp float linearize_depth_log(highp float d, highp float nearZ,highp float farZ) {\n      float depth = pow(2.0, d * log2(farZ + 1.0)) - 1.0;\n      float a = farZ / (farZ - nearZ);\n      float b = farZ * nearZ / (nearZ - farZ);\n      float linDepth = a + b / depth;\n      return ortho ? linearize_depth_ortho(\n        linDepth,\n        nearZ,\n        farZ\n      ) :linearize_depth(linDepth, nearZ, farZ);\n    }\n    vec3 getWorldPosLog(vec3 posS) {\n        vec2 uv = posS.xy;\n        float z = posS.z;\n        float nearZ =near;\n        float farZ = far;\n        float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n        float a = farZ / (farZ - nearZ);\n        float b = farZ * nearZ / (nearZ - farZ);\n        float linDepth = a + b / depth;\n        vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n        vec4 wpos = projectionMatrixInv * clipVec;\n        return wpos.xyz / wpos.w;\n      }\n      vec3 getWorldPos(float depth, vec2 coord) {\n        #ifdef LOGDEPTH\n          #ifndef ORTHO\n            return getWorldPosLog(vec3(coord, depth));\n          #endif\n        #endif\n      //  }\n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n  \n    vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n      ivec2 p = ivec2(vUv * resolution);\n      #ifdef REVERSEDEPTH\n      float c0 = 1.0 - texelFetch(sceneDepth, p, 0).x;\n      float l2 = 1.0 - texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = 1.0 - texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = 1.0 - texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = 1.0 - texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = 1.0 - texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = 1.0 - texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = 1.0 - texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = 1.0 - texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n      #else\n      float c0 = texelFetch(sceneDepth, p, 0).x;\n      float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n      #endif\n  \n      float dl = abs((2.0 * l1 - l2) - c0);\n      float dr = abs((2.0 * r1 - r2) - c0);\n      float db = abs((2.0 * b1 - b2) - c0);\n      float dt = abs((2.0 * t1 - t2) - c0);\n  \n      vec3 ce = getWorldPos(c0, vUv).xyz;\n  \n      vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                            : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n      vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                            : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n  \n      return normalize(cross(dpdx, dpdy));\n  }\n\n    #include <common>\n    #include <dithering_pars_fragment>\n    void main() {\n        //vec4 texel = texture2D(tDiffuse, vUv);//vec3(0.0);\n        vec4 sceneTexel = texture2D(sceneDiffuse, vUv);\n        #ifdef REVERSEDEPTH\n        float depth = 1.0 - texture2D(sceneDepth, vUv).x;\n        #else\n        float depth = texture2D(sceneDepth, vUv).x;\n        #endif\n        #ifdef HALFRES \n        vec4 texel;\n        if (depth == 1.0) {\n            texel = vec4(0.0, 0.0, 0.0, 1.0);\n        } else {\n        vec3 worldPos = getWorldPos(depth, vUv);\n        vec3 normal = computeNormal(getWorldPos(depth, vUv), vUv);\n       // vec4 texel = texture2D(tDiffuse, vUv);\n       // Find closest depth;\n       float totalWeight = 0.0;\n       float radiusToUse = screenSpaceRadius ? distance(\n        worldPos,\n        getWorldPos(depth, vUv +\n          vec2(radius, 0.0) / resolution)\n      ) : radius;\n      float distanceFalloffToUse =screenSpaceRadius ?\n          radiusToUse * distanceFalloff\n      : distanceFalloff;\n        for(float x = -1.0; x <= 1.0; x++) {\n            for(float y = -1.0; y <= 1.0; y++) {\n                vec2 offset = vec2(x, y);\n                ivec2 p = ivec2(\n                    (vUv * resolution * 0.5) + offset\n                );\n                vec2 pUv = vec2(p) / (resolution * 0.5);\n                float sampleDepth = texelFetch(downsampledDepth,p, 0).x;\n                vec4 sampleInfo = texelFetch(tDiffuse, p, 0);\n                vec3 normalSample = sampleInfo.gba * 2.0 - 1.0;\n                vec3 worldPosSample = getWorldPos(sampleDepth, pUv);\n                float tangentPlaneDist = abs(dot(worldPosSample - worldPos, normal));\n                float rangeCheck = exp(-1.0 * tangentPlaneDist * (1.0 / distanceFalloffToUse)) * max(dot(normal, normalSample), 0.0);\n                float weight = rangeCheck;\n                totalWeight += weight;\n                texel += sampleInfo * weight;\n            }\n        }\n        if (totalWeight == 0.0) {\n            texel = texture2D(tDiffuse, vUv);\n        } else {\n            texel /= totalWeight;\n        }\n    }\n        #else\n        vec4 texel = texture2D(tDiffuse, vUv);\n        #endif\n\n        #ifdef LOGDEPTH\n        texel.r = clamp(texel.r, 0.0, 1.0);\n        if (texel.r == 0.0) {\n          texel.r = 1.0;\n        }\n        #endif\n     \n        float finalAo = pow(texel.r, intensity);\n        if (aoTones > 0.0) {\n            finalAo = ceil(finalAo * aoTones) / aoTones;\n        }\n        float fogFactor;\n        float fogDepth = distance(\n            cameraPos,\n            getWorldPos(depth, vUv)\n        );\n        if (fog) {\n            if (fogExp) {\n                fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n            } else {\n                fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n            }\n        }\n        if (transparencyAware) {\n            float transparencyDWOff = texture2D(transparencyDWFalse, vUv).a;\n            float transparencyDWOn = texture2D(transparencyDWTrue, vUv).a;\n            float adjustmentFactorOff = transparencyDWOff;\n            #ifdef REVERSEDEPTH\n            float depthSample = 1.0 - texture2D(sceneDepth, vUv).r;\n            float trueDepthSample = 1.0 - texture2D(transparencyDWTrueDepth, vUv).r;\n            #else\n            float depthSample = texture2D(sceneDepth, vUv).r;\n            float trueDepthSample = texture2D(transparencyDWTrueDepth, vUv).r;\n            #endif\n            float adjustmentFactorOn = (1.0 - transparencyDWOn) * (\n                trueDepthSample == depthSample ? 1.0 : 0.0\n            );\n            float adjustmentFactor = max(adjustmentFactorOff, adjustmentFactorOn);\n            finalAo = mix(finalAo, 1.0, adjustmentFactor);\n        }\n        finalAo = mix(finalAo, 1.0, fogFactor);\n        vec3 aoApplied = color * mix(vec3(1.0), sceneTexel.rgb, float(colorMultiply));\n        if (renderMode == 0.0) {\n            gl_FragColor = vec4( mix(sceneTexel.rgb, aoApplied, 1.0 - finalAo), sceneTexel.a);\n        } else if (renderMode == 1.0) {\n            gl_FragColor = vec4( mix(vec3(1.0), aoApplied, 1.0 - finalAo), sceneTexel.a);\n        } else if (renderMode == 2.0) {\n            gl_FragColor = vec4( sceneTexel.rgb, sceneTexel.a);\n        } else if (renderMode == 3.0) {\n            if (vUv.x < 0.5) {\n                gl_FragColor = vec4( sceneTexel.rgb, sceneTexel.a);\n            } else if (abs(vUv.x - 0.5) < 1.0 / resolution.x) {\n                gl_FragColor = vec4(1.0);\n            } else {\n                gl_FragColor = vec4( mix(sceneTexel.rgb, aoApplied, 1.0 - finalAo), sceneTexel.a);\n            }\n        } else if (renderMode == 4.0) {\n            if (vUv.x < 0.5) {\n                gl_FragColor = vec4( sceneTexel.rgb, sceneTexel.a);\n            } else if (abs(vUv.x - 0.5) < 1.0 / resolution.x) {\n                gl_FragColor = vec4(1.0);\n            } else {\n                gl_FragColor = vec4( mix(vec3(1.0), aoApplied, 1.0 - finalAo), sceneTexel.a);\n            }\n        }\n        #include <dithering_fragment>\n        if (gammaCorrection) {\n            gl_FragColor = sRGBTransferOETF(gl_FragColor);\n        }\n    }\n    `\n};\n\n\n\nconst $e52378cd0f5a973d$export$57856b59f317262e = {\n    uniforms: {\n        \"sceneDiffuse\": {\n            value: null\n        },\n        \"sceneDepth\": {\n            value: null\n        },\n        \"tDiffuse\": {\n            value: null\n        },\n        \"projMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"viewMat\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"projectionMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"viewMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"cameraPos\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3()\n        },\n        \"resolution\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()\n        },\n        \"time\": {\n            value: 0.0\n        },\n        \"r\": {\n            value: 5.0\n        },\n        \"blueNoise\": {\n            value: null\n        },\n        \"radius\": {\n            value: 12.0\n        },\n        \"worldRadius\": {\n            value: 5.0\n        },\n        \"index\": {\n            value: 0.0\n        },\n        \"poissonDisk\": {\n            value: []\n        },\n        \"distanceFalloff\": {\n            value: 1.0\n        },\n        \"near\": {\n            value: 0.1\n        },\n        \"far\": {\n            value: 1000.0\n        },\n        \"screenSpaceRadius\": {\n            value: false\n        }\n    },\n    depthWrite: false,\n    depthTest: false,\n    vertexShader: /* glsl */ `\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = vec4(position, 1.0);\n\t\t}`,\n    fragmentShader: /* glsl */ `\n\t\tuniform sampler2D sceneDiffuse;\n    uniform highp sampler2D sceneDepth;\n    uniform sampler2D tDiffuse;\n    uniform sampler2D blueNoise;\n    uniform mat4 projectionMatrixInv;\n    uniform mat4 viewMatrixInv;\n    uniform vec2 resolution;\n    uniform float r;\n    uniform float radius;\n     uniform float worldRadius;\n    uniform float index;\n     uniform float near;\n     uniform float far;\n     uniform float distanceFalloff;\n     uniform bool screenSpaceRadius;\n    varying vec2 vUv;\n\n    highp float linearize_depth(highp float d, highp float zNear,highp float zFar)\n    {\n        highp float z_n = 2.0 * d - 1.0;\n        return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));\n    }\n    highp float linearize_depth_log(highp float d, highp float nearZ,highp float farZ) {\n     float depth = pow(2.0, d * log2(farZ + 1.0)) - 1.0;\n     float a = farZ / (farZ - nearZ);\n     float b = farZ * nearZ / (nearZ - farZ);\n     float linDepth = a + b / depth;\n     return linearize_depth(linDepth, nearZ, farZ);\n   }\n   highp float linearize_depth_ortho(highp float d, highp float nearZ, highp float farZ) {\n     return nearZ + (farZ - nearZ) * d;\n   }\n   vec3 getWorldPosLog(vec3 posS) {\n     vec2 uv = posS.xy;\n     float z = posS.z;\n     float nearZ =near;\n     float farZ = far;\n     float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n     float a = farZ / (farZ - nearZ);\n     float b = farZ * nearZ / (nearZ - farZ);\n     float linDepth = a + b / depth;\n     vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n     vec4 wpos = projectionMatrixInv * clipVec;\n     return wpos.xyz / wpos.w;\n   }\n    vec3 getWorldPos(float depth, vec2 coord) {\n     #ifdef LOGDEPTH\n      #ifndef ORTHO\n          return getWorldPosLog(vec3(coord, depth));\n      #endif\n     #endif\n        \n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n    #include <common>\n    #define NUM_SAMPLES 16\n    uniform vec2 poissonDisk[NUM_SAMPLES];\n    void main() {\n        const float pi = 3.14159;\n        vec2 texelSize = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n        vec2 uv = vUv;\n        vec4 data = texture2D(tDiffuse, vUv);\n        float occlusion = data.r;\n        float baseOcc = data.r;\n        vec3 normal = data.gba * 2.0 - 1.0;\n        float count = 1.0;\n        float d = texture2D(sceneDepth, vUv).x;\n        if (d == 1.0) {\n          gl_FragColor = data;\n          return;\n        }\n        vec3 worldPos = getWorldPos(d, vUv);\n        float size = radius;\n        float angle;\n        if (index == 0.0) {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).w * PI2;\n        } else if (index == 1.0) {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).z * PI2;\n        } else if (index == 2.0) {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).y * PI2;\n        } else {\n             angle = texture2D(blueNoise, gl_FragCoord.xy / 128.0).x * PI2;\n        }\n\n        mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n        float radiusToUse = screenSpaceRadius ? distance(\n          worldPos,\n          getWorldPos(d, vUv +\n            vec2(worldRadius, 0.0) / resolution)\n        ) : worldRadius;\n        float distanceFalloffToUse =screenSpaceRadius ?\n        radiusToUse * distanceFalloff\n    : radiusToUse * distanceFalloff * 0.2;\n\n        float invDistance = (1.0 / distanceFalloffToUse);\n        for(int i = 0; i < NUM_SAMPLES; i++) {\n            vec2 offset = (rotationMatrix * poissonDisk[i]) * texelSize * size;\n            vec4 dataSample = texture2D(tDiffuse, uv + offset);\n            float occSample = dataSample.r;\n            vec3 normalSample = dataSample.gba * 2.0 - 1.0;\n            float dSample = texture2D(sceneDepth, uv + offset).x;\n            vec3 worldPosSample = getWorldPos(dSample, uv + offset);\n            float tangentPlaneDist = abs(dot(worldPosSample - worldPos, normal));\n            float rangeCheck = float(dSample != 1.0) * exp(-1.0 * tangentPlaneDist * invDistance ) * max(dot(normal, normalSample), 0.0);\n            occlusion += occSample * rangeCheck;\n            count += rangeCheck;\n        }\n        if (count > 0.0) {\n          occlusion /= count;\n        }\n        occlusion = clamp(occlusion, 0.0, 1.0);\n        if (occlusion == 0.0) {\n          occlusion = 1.0;\n        }\n        gl_FragColor = vec4(occlusion, 0.5 + 0.5 * normal);\n    }\n    `\n};\n\n\n\nconst $26aca173e0984d99$export$1efdf491687cd442 = {\n    uniforms: {\n        \"sceneDepth\": {\n            value: null\n        },\n        \"resolution\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector2()\n        },\n        \"near\": {\n            value: 0.1\n        },\n        \"far\": {\n            value: 1000.0\n        },\n        \"viewMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"projectionMatrixInv\": {\n            value: /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4()\n        },\n        \"logDepth\": {\n            value: false\n        },\n        \"ortho\": {\n            value: false\n        }\n    },\n    depthWrite: false,\n    depthTest: false,\n    vertexShader: /* glsl */ `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 1);\n    }`,\n    fragmentShader: /* glsl */ `\n    uniform highp sampler2D sceneDepth;\n    uniform vec2 resolution;\n    uniform float near;\n    uniform float far;\n    uniform bool logDepth;\n    uniform bool ortho;\n    uniform mat4 viewMatrixInv;\n    uniform mat4 projectionMatrixInv;\n    varying vec2 vUv;\n    layout(location = 1) out vec4 gNormal;\n    vec3 getWorldPosLog(vec3 posS) {\n        vec2 uv = posS.xy;\n        float z = posS.z;\n        float nearZ =near;\n        float farZ = far;\n        float depth = pow(2.0, z * log2(farZ + 1.0)) - 1.0;\n        float a = farZ / (farZ - nearZ);\n        float b = farZ * nearZ / (nearZ - farZ);\n        float linDepth = a + b / depth;\n        vec4 clipVec = vec4(uv, linDepth, 1.0) * 2.0 - 1.0;\n        vec4 wpos = projectionMatrixInv * clipVec;\n        return wpos.xyz / wpos.w;\n      }\n      vec3 getWorldPos(float depth, vec2 coord) {\n        if (logDepth && !ortho) {\n          return getWorldPosLog(vec3(coord, depth));\n        }\n        float z = depth * 2.0 - 1.0;\n        vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n        vec4 viewSpacePosition = projectionMatrixInv * clipSpacePosition;\n        // Perspective division\n       vec4 worldSpacePosition = viewSpacePosition;\n       worldSpacePosition.xyz /= worldSpacePosition.w;\n        return worldSpacePosition.xyz;\n    }\n  \n    vec3 computeNormal(vec3 worldPos, vec2 vUv) {\n      ivec2 p = ivec2(vUv * resolution);\n      #ifdef REVERSEDEPTH\n      float c0 = 1.0 - texelFetch(sceneDepth, p, 0).x;\n      float l2 = 1.0 - texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = 1.0 - texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = 1.0 - texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = 1.0 - texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = 1.0 - texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = 1.0 - texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = 1.0 - texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = 1.0 - texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n      #else\n      float c0 = texelFetch(sceneDepth, p, 0).x;\n      float l2 = texelFetch(sceneDepth, p - ivec2(2, 0), 0).x;\n      float l1 = texelFetch(sceneDepth, p - ivec2(1, 0), 0).x;\n      float r1 = texelFetch(sceneDepth, p + ivec2(1, 0), 0).x;\n      float r2 = texelFetch(sceneDepth, p + ivec2(2, 0), 0).x;\n      float b2 = texelFetch(sceneDepth, p - ivec2(0, 2), 0).x;\n      float b1 = texelFetch(sceneDepth, p - ivec2(0, 1), 0).x;\n      float t1 = texelFetch(sceneDepth, p + ivec2(0, 1), 0).x;\n      float t2 = texelFetch(sceneDepth, p + ivec2(0, 2), 0).x;\n      #endif\n  \n      float dl = abs((2.0 * l1 - l2) - c0);\n      float dr = abs((2.0 * r1 - r2) - c0);\n      float db = abs((2.0 * b1 - b2) - c0);\n      float dt = abs((2.0 * t1 - t2) - c0);\n  \n      vec3 ce = getWorldPos(c0, vUv).xyz;\n  \n      vec3 dpdx = (dl < dr) ? ce - getWorldPos(l1, (vUv - vec2(1.0 / resolution.x, 0.0))).xyz\n                            : -ce + getWorldPos(r1, (vUv + vec2(1.0 / resolution.x, 0.0))).xyz;\n      vec3 dpdy = (db < dt) ? ce - getWorldPos(b1, (vUv - vec2(0.0, 1.0 / resolution.y))).xyz\n                            : -ce + getWorldPos(t1, (vUv + vec2(0.0, 1.0 / resolution.y))).xyz;\n  \n      return normalize(cross(dpdx, dpdy));\n  }\n    void main() {\n        vec2 uv = vUv - vec2(0.5) / resolution;\n        vec2 pixelSize = vec2(1.0) / resolution;\n        highp vec2[4] uvSamples;\n        uvSamples[0] = uv;\n        uvSamples[1] = uv + vec2(pixelSize.x, 0.0);\n        uvSamples[2] = uv + vec2(0.0, pixelSize.y);\n        uvSamples[3] = uv + pixelSize;\n        #ifdef REVERSEDEPTH\n        float depth00 = 1.0 - texture2D(sceneDepth, uvSamples[0]).r;\n        float depth10 = 1.0 - texture2D(sceneDepth, uvSamples[1]).r;\n        float depth01 = 1.0 - texture2D(sceneDepth, uvSamples[2]).r;\n        float depth11 = 1.0 - texture2D(sceneDepth, uvSamples[3]).r;\n        #else\n        float depth00 = texture2D(sceneDepth, uvSamples[0]).r;\n        float depth10 = texture2D(sceneDepth, uvSamples[1]).r;\n        float depth01 = texture2D(sceneDepth, uvSamples[2]).r;\n        float depth11 = texture2D(sceneDepth, uvSamples[3]).r;\n        #endif\n        float minDepth = min(min(depth00, depth10), min(depth01, depth11));\n        float maxDepth = max(max(depth00, depth10), max(depth01, depth11));\n        float targetDepth = minDepth;\n        // Checkerboard pattern to avoid artifacts\n        if (mod(gl_FragCoord.x + gl_FragCoord.y, 2.0) > 0.5) { \n            targetDepth = maxDepth;\n        }\n        int chosenIndex = 0;\n        float[4] samples;\n        samples[0] = depth00;\n        samples[1] = depth10;\n        samples[2] = depth01;\n        samples[3] = depth11;\n        for(int i = 0; i < 4; ++i) {\n            if (samples[i] == targetDepth) {\n                chosenIndex = i;\n                break;\n            }\n        }\n        gl_FragColor = vec4(samples[chosenIndex], 0.0, 0.0, 1.0);\n        gNormal = vec4(computeNormal(\n            getWorldPos(samples[chosenIndex], uvSamples[chosenIndex]), uvSamples[chosenIndex]\n        ), 0.0);\n    }`\n};\n\n\n\n\n\n\n\n\n\nconst $06269ad78f3c5fdf$var$BlueNoise = ``;\nconst $06269ad78f3c5fdf$var$bluenoiseBits = /* @__PURE__ */ (()=>Uint8Array.from(atob($06269ad78f3c5fdf$var$BlueNoise), (c)=>c.charCodeAt(0)))();\nvar $06269ad78f3c5fdf$export$2e2bcd8739ae039 = $06269ad78f3c5fdf$var$bluenoiseBits;\n\n\n\n\nconst $ff9437d9c7577f11$var$version = /* @__PURE__ */ (()=>parseInt(three__WEBPACK_IMPORTED_MODULE_0__.REVISION.replace(/\\D+/g, \"\")))();\nconst $ff9437d9c7577f11$export$156f6a58f569aa09 = $ff9437d9c7577f11$var$version >= 162 ? class extends three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget {\n    constructor(width = 1, height = 1, count = 1, options = {}){\n        super(width, height, {\n            ...options,\n            count: count\n        });\n        this.isWebGLMultipleRenderTargets = true;\n    }\n    get texture() {\n        return this.textures;\n    }\n} : class extends three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget {\n    constructor(width = 1, height = 1, count = 1, options = {}){\n        super(width, height, options);\n        this.isWebGLMultipleRenderTargets = true;\n        const texture = this.texture;\n        this.texture = [];\n        for(let i = 0; i < count; i++){\n            this.texture[i] = texture.clone();\n            this.texture[i].isRenderTargetTexture = true;\n        }\n    }\n    setSize(width, height, depth = 1) {\n        if (this.width !== width || this.height !== height || this.depth !== depth) {\n            this.width = width;\n            this.height = height;\n            this.depth = depth;\n            for(let i = 0, il = this.texture.length; i < il; i++){\n                this.texture[i].image.width = width;\n                this.texture[i].image.height = height;\n                this.texture[i].image.depth = depth;\n            }\n            this.dispose();\n        }\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n    }\n    copy(source) {\n        this.dispose();\n        this.width = source.width;\n        this.height = source.height;\n        this.depth = source.depth;\n        this.scissor.copy(source.scissor);\n        this.scissorTest = source.scissorTest;\n        this.viewport.copy(source.viewport);\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();\n        this.texture.length = 0;\n        for(let i = 0, il = source.texture.length; i < il; i++){\n            this.texture[i] = source.texture[i].clone();\n            this.texture[i].isRenderTargetTexture = true;\n        }\n        return this;\n    }\n};\n\n\n/**\n * \n * @param {*} timerQuery \n * @param {THREE.WebGLRenderer} gl \n * @param {N8AOPostPass | N8AOPass} pass \n */ function $87431ee93b037844$var$checkTimerQuery(timerQuery, gl, pass) {\n    const available = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT_AVAILABLE);\n    if (available) {\n        const elapsedTimeInNs = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT);\n        const elapsedTimeInMs = elapsedTimeInNs / 1000000;\n        pass.lastTime = pass.lastTime === 0 ? elapsedTimeInMs : pass.timeRollingAverage * pass.lastTime + (1 - pass.timeRollingAverage) * elapsedTimeInMs;\n    } else // If the result is not available yet, check again after a delay\n    setTimeout(()=>{\n        $87431ee93b037844$var$checkTimerQuery(timerQuery, gl, pass);\n    }, 1);\n}\nclass $87431ee93b037844$export$2489f9981ab0fa82 extends (0, postprocessing__WEBPACK_IMPORTED_MODULE_1__.Pass) {\n    /**\n     * \n     * @param {THREE.Scene} scene\n     * @param {THREE.Camera} camera \n     * @param {number} width \n     * @param {number} height\n     *  \n     * @property {THREE.Scene} scene\n     * @property {THREE.Camera} camera\n     * @property {number} width\n     * @property {number} height\n     */ constructor(scene, camera, width = 512, height = 512){\n        super();\n        this.width = width;\n        this.height = height;\n        this.clear = true;\n        this.camera = camera;\n        this.scene = scene;\n        /**\n         * @type {Proxy & {\n         * aoSamples: number,\n         * aoRadius: number,\n         * denoiseSamples: number,\n         * denoiseRadius: number,\n         * distanceFalloff: number,\n         * intensity: number,\n         * denoiseIterations: number,\n         * renderMode: 0 | 1 | 2 | 3 | 4,\n         * color: THREE.Color,\n         * gammaCorrection: boolean,\n         * depthBufferType: 1 | 2 | 3,\n         * screenSpaceRadius: boolean,\n         * halfRes: boolean,\n         * depthAwareUpsampling: boolean\n         * colorMultiply: boolean\n         * }\n         */ this.autosetGamma = true;\n        this.configuration = new Proxy({\n            aoSamples: 16,\n            aoRadius: 5.0,\n            aoTones: 0.0,\n            denoiseSamples: 8,\n            denoiseRadius: 12,\n            distanceFalloff: 1.0,\n            intensity: 5,\n            denoiseIterations: 2.0,\n            renderMode: 0,\n            biasOffset: 0.0,\n            biasMultiplier: 0.0,\n            color: new three__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 0),\n            gammaCorrection: true,\n            depthBufferType: (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Default,\n            screenSpaceRadius: false,\n            halfRes: false,\n            depthAwareUpsampling: true,\n            colorMultiply: true,\n            transparencyAware: false,\n            accumulate: false\n        }, {\n            set: (target, propName, value)=>{\n                const oldProp = target[propName];\n                target[propName] = value;\n                if (value.equals) {\n                    if (!value.equals(oldProp)) this.firstFrame();\n                } else if (oldProp !== value) this.firstFrame();\n                if (propName === \"aoSamples\" && oldProp !== value) this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                if (propName === \"denoiseSamples\" && oldProp !== value) this.configureDenoisePass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                if (propName === \"halfRes\" && oldProp !== value) {\n                    this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                    this.configureHalfResTargets();\n                    this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                    this.setSize(this.width, this.height);\n                }\n                if (propName === \"depthAwareUpsampling\" && oldProp !== value) this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                if (propName === \"gammaCorrection\") this.autosetGamma = false;\n                if (propName === \"transparencyAware\" && oldProp !== value) {\n                    this.autoDetectTransparency = false;\n                    this.configureTransparencyTarget();\n                }\n                return true;\n            }\n        });\n        /** @type {THREE.Vector3[]} */ this.samples = [];\n        /** @type {THREE.Vector2[]} */ this.samplesDenoise = [];\n        this.autoDetectTransparency = true;\n        this.frames = 0;\n        this.lastViewMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.lastProjectionMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.configureEffectCompositer(this.configuration.depthBufferType);\n        this.configureSampleDependentPasses();\n        this.configureHalfResTargets();\n        this.detectTransparency();\n        this.configureTransparencyTarget();\n        //   this.effectCompisterQuad = new FullScreenTriangle(new THREE.ShaderMaterial(EffectCompositer));\n        this.copyQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({\n            uniforms: {\n                tDiffuse: {\n                    value: null\n                }\n            },\n            depthWrite: false,\n            vertexShader: `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = vec4(position, 1);\n            }\n            `,\n            fragmentShader: `\n            uniform sampler2D tDiffuse;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = texture2D(tDiffuse, vUv);\n            }\n            `\n        }));\n        this.writeTargetInternal = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n        });\n        this.readTargetInternal = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n        });\n        this.outputTargetInternal = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false\n        });\n        this.accumulationRenderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,\n            type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n            stencilBuffer: false,\n            depthBuffer: false,\n            alpha: true\n        });\n        this.accumulationQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({\n            uniforms: {\n                frame: {\n                    value: 0\n                },\n                tDiffuse: {\n                    value: null\n                }\n            },\n            transparent: true,\n            opacity: 1,\n            vertexShader: `\n             varying vec2 vUv;\n             void main() {\n                 vUv = uv;\n                 gl_Position = vec4(position, 1);\n             }`,\n            fragmentShader: `\n             uniform sampler2D tDiffuse;\n             uniform float frame;\n                varying vec2 vUv;\n                void main() {\n                    vec4 color = texture2D(tDiffuse, vUv);\n                    gl_FragColor = vec4(color.rgb, 1.0 / (frame + 1.0));\n                }\n                `\n        }));\n        /** @type {THREE.DataTexture} */ this.bluenoise = new three__WEBPACK_IMPORTED_MODULE_0__.DataTexture((0, $06269ad78f3c5fdf$export$2e2bcd8739ae039), 128, 128);\n        this.bluenoise.colorSpace = three__WEBPACK_IMPORTED_MODULE_0__.NoColorSpace;\n        this.bluenoise.wrapS = three__WEBPACK_IMPORTED_MODULE_0__.RepeatWrapping;\n        this.bluenoise.wrapT = three__WEBPACK_IMPORTED_MODULE_0__.RepeatWrapping;\n        this.bluenoise.minFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n        this.bluenoise.magFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n        this.bluenoise.needsUpdate = true;\n        this.lastTime = 0;\n        this.timeRollingAverage = 0.99;\n        this.needsDepthTexture = true;\n        this.needsSwap = true;\n        this._r = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._c = new three__WEBPACK_IMPORTED_MODULE_0__.Color();\n    }\n    configureHalfResTargets() {\n        this.firstFrame();\n        if (this.configuration.halfRes) {\n            this.depthDownsampleTarget = new (0, $ff9437d9c7577f11$export$156f6a58f569aa09)(this.width / 2, this.height / 2, 2);\n            if (three__WEBPACK_IMPORTED_MODULE_0__.REVISION <= 161) this.depthDownsampleTarget.textures = this.depthDownsampleTarget.texture;\n            this.depthDownsampleTarget.textures[0].format = three__WEBPACK_IMPORTED_MODULE_0__.RedFormat;\n            this.depthDownsampleTarget.textures[0].type = three__WEBPACK_IMPORTED_MODULE_0__.FloatType;\n            this.depthDownsampleTarget.textures[0].minFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[0].magFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[0].depthBuffer = false;\n            this.depthDownsampleTarget.textures[1].format = three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat;\n            this.depthDownsampleTarget.textures[1].type = three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType;\n            this.depthDownsampleTarget.textures[1].minFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[1].magFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[1].depthBuffer = false;\n            this.depthDownsampleQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial((0, $26aca173e0984d99$export$1efdf491687cd442)));\n        } else {\n            if (this.depthDownsampleTarget) {\n                this.depthDownsampleTarget.dispose();\n                this.depthDownsampleTarget = null;\n            }\n            if (this.depthDownsampleQuad) {\n                this.depthDownsampleQuad.dispose();\n                this.depthDownsampleQuad = null;\n            }\n        }\n    }\n    detectTransparency() {\n        if (this.autoDetectTransparency) {\n            let isTransparency = false;\n            this.scene.traverse((obj)=>{\n                if (obj.material && obj.material.transparent) isTransparency = true;\n            });\n            if (isTransparency) this.configuration.transparencyAware = true;\n        }\n    }\n    configureTransparencyTarget() {\n        if (this.configuration.transparencyAware) {\n            this.transparencyRenderTargetDWFalse = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n                minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n                magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,\n                type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n                format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n            });\n            this.transparencyRenderTargetDWTrue = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n                minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n                magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,\n                type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n                format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n            });\n            this.transparencyRenderTargetDWTrue.depthTexture = new three__WEBPACK_IMPORTED_MODULE_0__.DepthTexture(this.width, this.height, three__WEBPACK_IMPORTED_MODULE_0__.UnsignedIntType);\n            this.depthCopyPass = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({\n                uniforms: {\n                    depthTexture: {\n                        value: this.depthTexture\n                    },\n                    reverseDepthBuffer: {\n                        value: this.configuration.depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse\n                    }\n                },\n                vertexShader: /* glsl */ `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = vec4(position, 1);\n            }`,\n                fragmentShader: /* glsl */ `\n            uniform sampler2D depthTexture;\n            uniform bool reverseDepthBuffer;\n            varying vec2 vUv;\n            void main() {\n                if (reverseDepthBuffer) {\n               float d = 1.0 - texture2D(depthTexture, vUv).r;\n           \n               d += 0.00001;\n               gl_FragDepth = 1.0 - d;\n            } else {\n                float d = texture2D(depthTexture, vUv).r;\n                d += 0.00001;\n                gl_FragDepth = d;\n            }\n               gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n            }\n            `\n            }));\n        } else {\n            if (this.transparencyRenderTargetDWFalse) {\n                this.transparencyRenderTargetDWFalse.dispose();\n                this.transparencyRenderTargetDWFalse = null;\n            }\n            if (this.transparencyRenderTargetDWTrue) {\n                this.transparencyRenderTargetDWTrue.dispose();\n                this.transparencyRenderTargetDWTrue = null;\n            }\n            if (this.depthCopyPass) {\n                this.depthCopyPass.dispose();\n                this.depthCopyPass = null;\n            }\n        }\n    }\n    renderTransparency(renderer) {\n        const oldBackground = this.scene.background;\n        const oldClearColor = renderer.getClearColor(new three__WEBPACK_IMPORTED_MODULE_0__.Color());\n        const oldClearAlpha = renderer.getClearAlpha();\n        const oldVisibility = new Map();\n        const oldAutoClearDepth = renderer.autoClearDepth;\n        this.scene.traverse((obj)=>{\n            oldVisibility.set(obj, obj.visible);\n        });\n        // Override the state\n        this.scene.background = null;\n        renderer.autoClearDepth = false;\n        renderer.setClearColor(new three__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 0), 0);\n        this.depthCopyPass.material.uniforms.depthTexture.value = this.depthTexture;\n        this.depthCopyPass.material.uniforms.reverseDepthBuffer.value = this.configuration.depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse;\n        // Render out transparent objects WITHOUT depth write\n        renderer.setRenderTarget(this.transparencyRenderTargetDWFalse);\n        this.scene.traverse((obj)=>{\n            if (obj.material) obj.visible = oldVisibility.get(obj) && (obj.material.transparent && !obj.material.depthWrite && !obj.userData.treatAsOpaque || !!obj.userData.cannotReceiveAO);\n        });\n        renderer.clear(true, true, true);\n        this.depthCopyPass.render(renderer);\n        renderer.render(this.scene, this.camera);\n        // Render out transparent objects WITH depth write\n        renderer.setRenderTarget(this.transparencyRenderTargetDWTrue);\n        this.scene.traverse((obj)=>{\n            if (obj.material) obj.visible = oldVisibility.get(obj) && obj.material.transparent && obj.material.depthWrite && !obj.userData.treatAsOpaque;\n        });\n        renderer.clear(true, true, true);\n        this.depthCopyPass.render(renderer);\n        renderer.render(this.scene, this.camera);\n        // Restore\n        this.scene.traverse((obj)=>{\n            obj.visible = oldVisibility.get(obj);\n        });\n        renderer.setClearColor(oldClearColor, oldClearAlpha);\n        this.scene.background = oldBackground;\n        renderer.autoClearDepth = oldAutoClearDepth;\n    }\n    configureSampleDependentPasses() {\n        this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n        this.configureDenoisePass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n    }\n    configureAOPass(depthBufferType = (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Default, ortho = false) {\n        this.firstFrame();\n        this.samples = this.generateHemisphereSamples(this.configuration.aoSamples);\n        const e = {\n            ...(0, $1ed45968c1160c3c$export$c9b263b9a17dffd7)\n        };\n        e.fragmentShader = e.fragmentShader.replace(\"16\", this.configuration.aoSamples).replace(\"16.0\", this.configuration.aoSamples + \".0\");\n        if (depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Log) e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n        else if (depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse) e.fragmentShader = \"#define REVERSEDEPTH\\n\" + e.fragmentShader;\n        if (ortho) e.fragmentShader = \"#define ORTHO\\n\" + e.fragmentShader;\n        if (this.configuration.halfRes) e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n        if (this.effectShaderQuad) {\n            this.effectShaderQuad.material.dispose();\n            this.effectShaderQuad.material = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e);\n        } else this.effectShaderQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e));\n    }\n    configureDenoisePass(depthBufferType = (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Default, ortho = false) {\n        this.firstFrame();\n        this.samplesDenoise = this.generateDenoiseSamples(this.configuration.denoiseSamples, 11);\n        const p = {\n            ...(0, $e52378cd0f5a973d$export$57856b59f317262e)\n        };\n        p.fragmentShader = p.fragmentShader.replace(\"16\", this.configuration.denoiseSamples);\n        if (depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Log) p.fragmentShader = \"#define LOGDEPTH\\n\" + p.fragmentShader;\n        else if (depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse) p.fragmentShader = \"#define REVERSEDEPTH\\n\" + p.fragmentShader;\n        if (ortho) p.fragmentShader = \"#define ORTHO\\n\" + p.fragmentShader;\n        if (this.poissonBlurQuad) {\n            this.poissonBlurQuad.material.dispose();\n            this.poissonBlurQuad.material = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(p);\n        } else this.poissonBlurQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(p));\n    }\n    configureEffectCompositer(depthBufferType = (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Default, ortho = false) {\n        this.firstFrame();\n        const e = {\n            ...(0, $12b21d24d1192a04$export$a815acccbd2c9a49)\n        };\n        if (depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Log) e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n        else if (depthBufferType === (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse) e.fragmentShader = \"#define REVERSEDEPTH\\n\" + e.fragmentShader;\n        if (ortho) e.fragmentShader = \"#define ORTHO\\n\" + e.fragmentShader;\n        if (this.configuration.halfRes && this.configuration.depthAwareUpsampling) e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n        if (this.effectCompositerQuad) {\n            this.effectCompositerQuad.material.dispose();\n            this.effectCompositerQuad.material = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e);\n        } else this.effectCompositerQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e));\n    }\n    /**\n         * \n         * @param {Number} n \n         * @returns {THREE.Vector3[]}\n         */ generateHemisphereSamples(n) {\n        const points = [];\n        for(let k = 0; k < n; k++){\n            const theta = 2.399963 * k;\n            const r = Math.sqrt(k + 0.5) / Math.sqrt(n);\n            const x = r * Math.cos(theta);\n            const y = r * Math.sin(theta);\n            // Project to hemisphere\n            const z = Math.sqrt(1 - (x * x + y * y));\n            points.push(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(x, y, z));\n        }\n        return points;\n    }\n    /**\n         * \n         * @param {number} numSamples \n         * @param {number} numRings \n         * @returns {THREE.Vector2[]}\n         */ generateDenoiseSamples(numSamples, numRings) {\n        const angleStep = 2 * Math.PI * numRings / numSamples;\n        const invNumSamples = 1.0 / numSamples;\n        const radiusStep = invNumSamples;\n        const samples = [];\n        let radius = invNumSamples;\n        let angle = 0;\n        for(let i = 0; i < numSamples; i++){\n            samples.push(new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(Math.cos(angle), Math.sin(angle)).multiplyScalar(Math.pow(radius, 0.75)));\n            radius += radiusStep;\n            angle += angleStep;\n        }\n        return samples;\n    }\n    setSize(width, height) {\n        this.firstFrame();\n        this.width = width;\n        this.height = height;\n        const c = this.configuration.halfRes ? 0.5 : 1;\n        this.writeTargetInternal.setSize(width * c, height * c);\n        this.readTargetInternal.setSize(width * c, height * c);\n        this.accumulationRenderTarget.setSize(width * c, height * c);\n        if (this.configuration.halfRes) this.depthDownsampleTarget.setSize(width * c, height * c);\n        if (this.configuration.transparencyAware) {\n            this.transparencyRenderTargetDWFalse.setSize(width, height);\n            this.transparencyRenderTargetDWTrue.setSize(width, height);\n        }\n        this.outputTargetInternal.setSize(width, height);\n    }\n    setDepthTexture(depthTexture) {\n        this.depthTexture = depthTexture;\n    }\n    firstFrame() {\n        this.needsFrame = true;\n    }\n    render(renderer, inputBuffer, outputBuffer) {\n        const xrEnabled = renderer.xr.enabled;\n        renderer.xr.enabled = false;\n        // Copy inputBuffer to outputBuffer\n        //renderer.setRenderTarget(outputBuffer);\n        //  this.copyQuad.material.uniforms.tDiffuse.value = inputBuffer.texture;\n        //   this.copyQuad.render(renderer);\n        if (renderer.capabilities.logarithmicDepthBuffer && this.configuration.depthBufferType !== (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Log || renderer.capabilities.reverseDepthBuffer && this.configuration.depthBufferType !== (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse) {\n            this.configuration.depthBufferType = renderer.capabilities.logarithmicDepthBuffer ? (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Log : renderer.capabilities.reverseDepthBuffer ? (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Reverse : (0, $05f6997e4b65da14$export$ed4ee5d1e55474a5).Default;\n            this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n            this.configureDenoisePass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n            this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n        }\n        this.detectTransparency();\n        if (inputBuffer.texture.type !== this.outputTargetInternal.texture.type || inputBuffer.texture.format !== this.outputTargetInternal.texture.format) {\n            this.outputTargetInternal.texture.type = inputBuffer.texture.type;\n            this.outputTargetInternal.texture.format = inputBuffer.texture.format;\n            this.outputTargetInternal.texture.needsUpdate = true;\n        }\n        this.camera.updateMatrixWorld();\n        if (this.lastViewMatrix.equals(this.camera.matrixWorldInverse) && this.lastProjectionMatrix.equals(this.camera.projectionMatrix) && this.configuration.accumulate && !this.needsFrame) this.frame++;\n        else {\n            if (this.configuration.accumulate) {\n                renderer.setRenderTarget(this.accumulationRenderTarget);\n                renderer.clear(true, true, true);\n            }\n            this.frame = 0;\n            this.needsFrame = false;\n        }\n        this.lastViewMatrix.copy(this.camera.matrixWorldInverse);\n        this.lastProjectionMatrix.copy(this.camera.projectionMatrix);\n        let gl;\n        let ext;\n        let timerQuery;\n        if (this.debugMode) {\n            gl = renderer.getContext();\n            ext = gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n            if (ext === null) {\n                console.error(\"EXT_disjoint_timer_query_webgl2 not available, disabling debug mode.\");\n                this.debugMode = false;\n            }\n        }\n        if (this.debugMode) {\n            timerQuery = gl.createQuery();\n            gl.beginQuery(ext.TIME_ELAPSED_EXT, timerQuery);\n        }\n        if (this.configuration.transparencyAware) this.renderTransparency(renderer);\n        this._r.set(this.width, this.height);\n        let trueRadius = this.configuration.aoRadius;\n        if (this.configuration.halfRes && this.configuration.screenSpaceRadius) trueRadius *= 0.5;\n        if (this.frame < 1024 / this.configuration.aoSamples) {\n            if (this.configuration.halfRes) {\n                renderer.setRenderTarget(this.depthDownsampleTarget);\n                this.depthDownsampleQuad.material.uniforms.sceneDepth.value = this.depthTexture;\n                this.depthDownsampleQuad.material.uniforms.resolution.value = this._r;\n                this.depthDownsampleQuad.material.uniforms[\"near\"].value = this.camera.near;\n                this.depthDownsampleQuad.material.uniforms[\"far\"].value = this.camera.far;\n                this.depthDownsampleQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n                this.depthDownsampleQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n                this.depthDownsampleQuad.material.uniforms[\"logDepth\"].value = this.configuration.logarithmicDepthBuffer;\n                this.depthDownsampleQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n                this.depthDownsampleQuad.render(renderer);\n            }\n            this.effectShaderQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n            this.effectShaderQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[0] : this.depthTexture;\n            this.effectShaderQuad.material.uniforms[\"sceneNormal\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[1] : null;\n            this.effectShaderQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n            this.effectShaderQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n            this.effectShaderQuad.material.uniforms[\"projViewMat\"].value = this.camera.projectionMatrix.clone().multiply(this.camera.matrixWorldInverse.clone());\n            this.effectShaderQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n            this.effectShaderQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n            this.effectShaderQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n            this.effectShaderQuad.material.uniforms[\"biasAdjustment\"].value = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.configuration.biasOffset, this.configuration.biasMultiplier);\n            this.effectShaderQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(0.5).floor() : this._r;\n            this.effectShaderQuad.material.uniforms[\"time\"].value = performance.now() / 1000;\n            this.effectShaderQuad.material.uniforms[\"samples\"].value = this.samples;\n            this.effectShaderQuad.material.uniforms[\"bluenoise\"].value = this.bluenoise;\n            this.effectShaderQuad.material.uniforms[\"radius\"].value = trueRadius;\n            this.effectShaderQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n            this.effectShaderQuad.material.uniforms[\"near\"].value = this.camera.near;\n            this.effectShaderQuad.material.uniforms[\"far\"].value = this.camera.far;\n            this.effectShaderQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n            this.effectShaderQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n            this.effectShaderQuad.material.uniforms[\"frame\"].value = this.frame;\n            // Start the AO\n            renderer.setRenderTarget(this.writeTargetInternal);\n            this.effectShaderQuad.render(renderer);\n            // End the AO\n            // Start the blur\n            for(let i = 0; i < this.configuration.denoiseIterations; i++){\n                [this.writeTargetInternal, this.readTargetInternal] = [\n                    this.readTargetInternal,\n                    this.writeTargetInternal\n                ];\n                this.poissonBlurQuad.material.uniforms[\"tDiffuse\"].value = this.readTargetInternal.texture;\n                this.poissonBlurQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[0] : this.depthTexture;\n                this.poissonBlurQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n                this.poissonBlurQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n                this.poissonBlurQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n                this.poissonBlurQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n                this.poissonBlurQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n                this.poissonBlurQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(0.5).floor() : this._r;\n                this.poissonBlurQuad.material.uniforms[\"time\"].value = performance.now() / 1000;\n                this.poissonBlurQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n                this.poissonBlurQuad.material.uniforms[\"radius\"].value = this.configuration.denoiseRadius * (this.configuration.halfRes ? 0.5 : 1);\n                this.poissonBlurQuad.material.uniforms[\"worldRadius\"].value = trueRadius;\n                this.poissonBlurQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n                this.poissonBlurQuad.material.uniforms[\"index\"].value = i;\n                this.poissonBlurQuad.material.uniforms[\"poissonDisk\"].value = this.samplesDenoise;\n                this.poissonBlurQuad.material.uniforms[\"near\"].value = this.camera.near;\n                this.poissonBlurQuad.material.uniforms[\"far\"].value = this.camera.far;\n                this.poissonBlurQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n                renderer.setRenderTarget(this.writeTargetInternal);\n                this.poissonBlurQuad.render(renderer);\n            }\n            renderer.setRenderTarget(this.accumulationRenderTarget);\n            const oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            this.accumulationQuad.material.uniforms[\"tDiffuse\"].value = this.writeTargetInternal.texture;\n            this.accumulationQuad.material.uniforms[\"frame\"].value = this.frame;\n            this.accumulationQuad.render(renderer);\n            renderer.autoClear = oldAutoClear;\n        }\n        // Now, we have the blurred AO in writeTargetInternal\n        // End the blur\n        // Start the composition\n        if (this.configuration.transparencyAware) {\n            this.effectCompositerQuad.material.uniforms[\"transparencyDWFalse\"].value = this.transparencyRenderTargetDWFalse.texture;\n            this.effectCompositerQuad.material.uniforms[\"transparencyDWTrue\"].value = this.transparencyRenderTargetDWTrue.texture;\n            this.effectCompositerQuad.material.uniforms[\"transparencyDWTrueDepth\"].value = this.transparencyRenderTargetDWTrue.depthTexture;\n            this.effectCompositerQuad.material.uniforms[\"transparencyAware\"].value = true;\n        }\n        this.effectCompositerQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n        this.effectCompositerQuad.material.uniforms[\"sceneDepth\"].value = this.depthTexture;\n        this.effectCompositerQuad.material.uniforms[\"aoTones\"].value = this.configuration.aoTones;\n        this.effectCompositerQuad.material.uniforms[\"near\"].value = this.camera.near;\n        this.effectCompositerQuad.material.uniforms[\"far\"].value = this.camera.far;\n        this.effectCompositerQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n        this.effectCompositerQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n        this.effectCompositerQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n        this.effectCompositerQuad.material.uniforms[\"downsampledDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[0] : this.depthTexture;\n        this.effectCompositerQuad.material.uniforms[\"resolution\"].value = this._r;\n        this.effectCompositerQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n        this.effectCompositerQuad.material.uniforms[\"intensity\"].value = this.configuration.intensity;\n        this.effectCompositerQuad.material.uniforms[\"renderMode\"].value = this.configuration.renderMode;\n        this.effectCompositerQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n        this.effectCompositerQuad.material.uniforms[\"radius\"].value = trueRadius;\n        this.effectCompositerQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n        this.effectCompositerQuad.material.uniforms[\"gammaCorrection\"].value = this.autosetGamma ? this.renderToScreen : this.configuration.gammaCorrection;\n        this.effectCompositerQuad.material.uniforms[\"tDiffuse\"].value = this.accumulationRenderTarget.texture;\n        this.effectCompositerQuad.material.uniforms[\"color\"].value = this._c.copy(this.configuration.color).convertSRGBToLinear();\n        this.effectCompositerQuad.material.uniforms[\"colorMultiply\"].value = this.configuration.colorMultiply;\n        this.effectCompositerQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.effectCompositerQuad.material.uniforms[\"fog\"].value = !!this.scene.fog;\n        if (this.scene.fog) {\n            if (this.scene.fog.isFog) {\n                this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = false;\n                this.effectCompositerQuad.material.uniforms[\"fogNear\"].value = this.scene.fog.near;\n                this.effectCompositerQuad.material.uniforms[\"fogFar\"].value = this.scene.fog.far;\n            } else if (this.scene.fog.isFogExp2) {\n                this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = true;\n                this.effectCompositerQuad.material.uniforms[\"fogDensity\"].value = this.scene.fog.density;\n            } else console.error(`Unsupported fog type ${this.scene.fog.constructor.name} in SSAOPass.`);\n        }\n        renderer.setRenderTarget(/* this.renderToScreen ? null :\n                 outputBuffer*/ this.outputTargetInternal);\n        this.effectCompositerQuad.render(renderer);\n        renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n        this.copyQuad.material.uniforms[\"tDiffuse\"].value = this.outputTargetInternal.texture;\n        this.copyQuad.render(renderer);\n        if (this.debugMode) {\n            gl.endQuery(ext.TIME_ELAPSED_EXT);\n            $87431ee93b037844$var$checkTimerQuery(timerQuery, gl, this);\n        }\n        renderer.xr.enabled = xrEnabled;\n    }\n    /**\n         * Enables the debug mode of the AO, meaning the lastTime value will be updated.\n         */ enableDebugMode() {\n        this.debugMode = true;\n    }\n    /**\n         * Disables the debug mode of the AO, meaning the lastTime value will not be updated.\n         */ disableDebugMode() {\n        this.debugMode = false;\n    }\n    /**\n         * Sets the display mode of the AO\n         * @param {\"Combined\" | \"AO\" | \"No AO\" | \"Split\" | \"Split AO\"} mode - The display mode. \n         */ setDisplayMode(mode) {\n        this.configuration.renderMode = [\n            \"Combined\",\n            \"AO\",\n            \"No AO\",\n            \"Split\",\n            \"Split AO\"\n        ].indexOf(mode);\n    }\n    /**\n         * \n         * @param {\"Performance\" | \"Low\" | \"Medium\" | \"High\" | \"Ultra\"} mode \n         */ setQualityMode(mode) {\n        if (mode === \"Performance\") {\n            this.configuration.aoSamples = 8;\n            this.configuration.denoiseSamples = 4;\n            this.configuration.denoiseRadius = 12;\n        } else if (mode === \"Low\") {\n            this.configuration.aoSamples = 16;\n            this.configuration.denoiseSamples = 4;\n            this.configuration.denoiseRadius = 12;\n        } else if (mode === \"Medium\") {\n            this.configuration.aoSamples = 16;\n            this.configuration.denoiseSamples = 8;\n            this.configuration.denoiseRadius = 12;\n        } else if (mode === \"High\") {\n            this.configuration.aoSamples = 64;\n            this.configuration.denoiseSamples = 8;\n            this.configuration.denoiseRadius = 6;\n        } else if (mode === \"Ultra\") {\n            this.configuration.aoSamples = 64;\n            this.configuration.denoiseSamples = 16;\n            this.configuration.denoiseRadius = 6;\n        }\n    }\n}\n\n\n\n\n/**\n * \n * @param {*} timerQuery \n * @param {THREE.WebGLRenderer} gl \n * @param {N8AOPass} pass \n */ function $05f6997e4b65da14$var$checkTimerQuery(timerQuery, gl, pass) {\n    const available = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT_AVAILABLE);\n    if (available) {\n        const elapsedTimeInNs = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT);\n        const elapsedTimeInMs = elapsedTimeInNs / 1000000;\n        pass.lastTime = pass.lastTime === 0 ? elapsedTimeInMs : pass.timeRollingAverage * pass.lastTime + (1 - pass.timeRollingAverage) * elapsedTimeInMs;\n    } else // If the result is not available yet, check again after a delay\n    setTimeout(()=>{\n        $05f6997e4b65da14$var$checkTimerQuery(timerQuery, gl, pass);\n    }, 1);\n}\nconst $05f6997e4b65da14$export$ed4ee5d1e55474a5 = {\n    Default: 1,\n    Log: 2,\n    Reverse: 3\n};\nclass $05f6997e4b65da14$export$2d57db20b5eb5e0a extends (0, three_examples_jsm_postprocessing_Pass_js__WEBPACK_IMPORTED_MODULE_2__.Pass) {\n    /**\n     * \n     * @param {THREE.Scene} scene\n     * @param {THREE.Camera} camera \n     * @param {number} width \n     * @param {number} height\n     *  \n     * @property {THREE.Scene} scene\n     * @property {THREE.Camera} camera\n     * @property {number} width\n     * @property {number} height\n     */ constructor(scene, camera, width = 512, height = 512){\n        super();\n        this.width = width;\n        this.height = height;\n        this.clear = true;\n        this.camera = camera;\n        this.scene = scene;\n        /**\n         * @type {Proxy & {\n         * aoSamples: number,\n         * aoRadius: number,\n         * denoiseSamples: number,\n         * denoiseRadius: number,\n         * distanceFalloff: number,\n         * intensity: number,\n         * denoiseIterations: number,\n         * renderMode: 0 | 1 | 2 | 3 | 4,\n         * color: THREE.Color,\n         * gammaCorrection: boolean,\n         * depthBufferType: 1 | 2 | 3,\n         * screenSpaceRadius: boolean,\n         * halfRes: boolean,\n         * depthAwareUpsampling: boolean,\n         * autoRenderBeauty: boolean\n         * colorMultiply: boolean\n         * }\n         */ this.configuration = new Proxy({\n            aoSamples: 16,\n            aoRadius: 5.0,\n            aoTones: 0.0,\n            denoiseSamples: 8,\n            denoiseRadius: 12,\n            distanceFalloff: 1.0,\n            intensity: 5,\n            denoiseIterations: 2.0,\n            renderMode: 0,\n            biasOffset: 0.0,\n            biasMultiplier: 0.0,\n            color: new three__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 0),\n            gammaCorrection: true,\n            depthBufferType: $05f6997e4b65da14$export$ed4ee5d1e55474a5.Default,\n            screenSpaceRadius: false,\n            halfRes: false,\n            depthAwareUpsampling: true,\n            autoRenderBeauty: true,\n            colorMultiply: true,\n            transparencyAware: false,\n            stencil: false,\n            accumulate: false\n        }, {\n            set: (target, propName, value)=>{\n                const oldProp = target[propName];\n                target[propName] = value;\n                if (value.equals) {\n                    if (!value.equals(oldProp)) this.firstFrame();\n                } else if (oldProp !== value) this.firstFrame();\n                if (propName === \"aoSamples\" && oldProp !== value) this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                if (propName === \"denoiseSamples\" && oldProp !== value) this.configureDenoisePass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                if (propName === \"halfRes\" && oldProp !== value) {\n                    this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                    this.configureHalfResTargets();\n                    this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                    this.setSize(this.width, this.height);\n                }\n                if (propName === \"depthAwareUpsampling\" && oldProp !== value) this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n                if (propName === \"transparencyAware\" && oldProp !== value) {\n                    this.autoDetectTransparency = false;\n                    this.configureTransparencyTarget();\n                }\n                if (propName === \"stencil\" && oldProp !== value) {\n                    /*  this.beautyRenderTarget.stencilBuffer = value;\n                      this.beautyRenderTarget.depthTexture.format = value ? THREE.DepthStencilFormat : THREE.DepthFormat;\n                      this.beautyRenderTarget.depthTexture.type = value ? THREE.UnsignedInt248Type : THREE.UnsignedIntType;\n                      this.beautyRenderTarget.depthTexture.needsUpdate = true;\n                      this.beautyRenderTarget.needsUpdate = true;*/ this.beautyRenderTarget.dispose();\n                    this.beautyRenderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n                        minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n                        magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,\n                        type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n                        format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,\n                        stencilBuffer: value\n                    });\n                    this.beautyRenderTarget.depthTexture = new three__WEBPACK_IMPORTED_MODULE_0__.DepthTexture(this.width, this.height, value ? three__WEBPACK_IMPORTED_MODULE_0__.UnsignedInt248Type : three__WEBPACK_IMPORTED_MODULE_0__.UnsignedIntType);\n                    this.beautyRenderTarget.depthTexture.format = value ? three__WEBPACK_IMPORTED_MODULE_0__.DepthStencilFormat : three__WEBPACK_IMPORTED_MODULE_0__.DepthFormat;\n                }\n                return true;\n            }\n        });\n        /** @type {THREE.Vector3[]} */ this.samples = [];\n        /** @type {THREE.Vector2[]} */ this.samplesDenoise = [];\n        this.autoDetectTransparency = true;\n        this.frame = 0;\n        this.lastViewMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.lastProjectionMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\n        this.beautyRenderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,\n            type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,\n            stencilBuffer: false\n        });\n        this.beautyRenderTarget.depthTexture = new three__WEBPACK_IMPORTED_MODULE_0__.DepthTexture(this.width, this.height, three__WEBPACK_IMPORTED_MODULE_0__.UnsignedIntType);\n        this.beautyRenderTarget.depthTexture.format = three__WEBPACK_IMPORTED_MODULE_0__.DepthFormat;\n        this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n        this.configureSampleDependentPasses();\n        this.configureHalfResTargets();\n        this.detectTransparency();\n        this.configureTransparencyTarget();\n        this.writeTargetInternal = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n        });\n        this.readTargetInternal = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n        });\n        this.accumulationRenderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n            minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            depthBuffer: false,\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,\n            type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n            stencilBuffer: false,\n            depthBuffer: false,\n            alpha: true\n        });\n        /** @type {THREE.DataTexture} */ this.bluenoise = new three__WEBPACK_IMPORTED_MODULE_0__.DataTexture((0, $06269ad78f3c5fdf$export$2e2bcd8739ae039), 128, 128);\n        this.accumulationQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({\n            uniforms: {\n                frame: {\n                    value: 0\n                },\n                tDiffuse: {\n                    value: null\n                }\n            },\n            transparent: true,\n            opacity: 1,\n            vertexShader: `\n             varying vec2 vUv;\n             void main() {\n                 vUv = uv;\n                 gl_Position = vec4(position, 1);\n             }`,\n            fragmentShader: `\n             uniform sampler2D tDiffuse;\n             uniform float frame;\n                varying vec2 vUv;\n                void main() {\n                    vec4 color = texture2D(tDiffuse, vUv);\n                    gl_FragColor = vec4(color.rgb, 1.0 / (frame + 1.0));\n                }\n                `\n        }));\n        this.bluenoise.colorSpace = three__WEBPACK_IMPORTED_MODULE_0__.NoColorSpace;\n        this.bluenoise.wrapS = three__WEBPACK_IMPORTED_MODULE_0__.RepeatWrapping;\n        this.bluenoise.wrapT = three__WEBPACK_IMPORTED_MODULE_0__.RepeatWrapping;\n        this.bluenoise.minFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n        this.bluenoise.magFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n        this.bluenoise.needsUpdate = true;\n        this.lastTime = 0;\n        this.timeRollingAverage = 0.99;\n        this._r = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._c = new three__WEBPACK_IMPORTED_MODULE_0__.Color();\n    }\n    configureHalfResTargets() {\n        this.firstFrame();\n        if (this.configuration.halfRes) {\n            this.depthDownsampleTarget = new (0, $ff9437d9c7577f11$export$156f6a58f569aa09)(this.width / 2, this.height / 2, 2);\n            if (three__WEBPACK_IMPORTED_MODULE_0__.REVISION <= 161) this.depthDownsampleTarget.textures = this.depthDownsampleTarget.texture;\n            this.depthDownsampleTarget.textures[0].format = three__WEBPACK_IMPORTED_MODULE_0__.RedFormat;\n            this.depthDownsampleTarget.textures[0].type = three__WEBPACK_IMPORTED_MODULE_0__.FloatType;\n            this.depthDownsampleTarget.textures[0].minFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[0].magFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[0].depthBuffer = false;\n            this.depthDownsampleTarget.textures[1].format = three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat;\n            this.depthDownsampleTarget.textures[1].type = three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType;\n            this.depthDownsampleTarget.textures[1].minFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[1].magFilter = three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter;\n            this.depthDownsampleTarget.textures[1].depthBuffer = false;\n            const e = {\n                ...(0, $26aca173e0984d99$export$1efdf491687cd442)\n            };\n            if (depthBufferType === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse) e.fragmentShader = \"#define REVERSEDEPTH\\n\" + e.fragmentShader;\n            this.depthDownsampleQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e));\n        } else {\n            if (this.depthDownsampleTarget) {\n                this.depthDownsampleTarget.dispose();\n                this.depthDownsampleTarget = null;\n            }\n            if (this.depthDownsampleQuad) {\n                this.depthDownsampleQuad.dispose();\n                this.depthDownsampleQuad = null;\n            }\n        }\n    }\n    detectTransparency() {\n        if (this.autoDetectTransparency) {\n            let isTransparency = false;\n            this.scene.traverse((obj)=>{\n                if (obj.material && obj.material.transparent) isTransparency = true;\n            });\n            this.configuration.transparencyAware = isTransparency;\n        }\n    }\n    configureTransparencyTarget() {\n        if (this.configuration.transparencyAware) {\n            this.transparencyRenderTargetDWFalse = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n                minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n                magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,\n                type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n                format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n            });\n            this.transparencyRenderTargetDWTrue = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, {\n                minFilter: three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n                magFilter: three__WEBPACK_IMPORTED_MODULE_0__.NearestFilter,\n                type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n                format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat\n            });\n            this.transparencyRenderTargetDWTrue.depthTexture = new three__WEBPACK_IMPORTED_MODULE_0__.DepthTexture(this.width, this.height, three__WEBPACK_IMPORTED_MODULE_0__.UnsignedIntType);\n            this.depthCopyPass = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial({\n                uniforms: {\n                    depthTexture: {\n                        value: this.depthTexture\n                    },\n                    reverseDepthBuffer: {\n                        value: this.configuration.depthBufferType === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse\n                    }\n                },\n                vertexShader: /* glsl */ `\n                        varying vec2 vUv;\n                        void main() {\n                            vUv = uv;\n                            gl_Position = vec4(position, 1);\n                        }`,\n                fragmentShader: /* glsl */ `\n                        uniform sampler2D depthTexture;\n                        uniform bool reverseDepthBuffer;\n                        varying vec2 vUv;\n                        void main() {\n                            if (reverseDepthBuffer) {\n                           float d = 1.0 - texture2D(depthTexture, vUv).r;\n                       \n                           d += 0.00001;\n                           gl_FragDepth = 1.0 - d;\n                        } else {\n                            float d = texture2D(depthTexture, vUv).r;\n                            d += 0.00001;\n                            gl_FragDepth = d;\n                        }\n                           gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n                        }\n                        `\n            }));\n        } else {\n            if (this.transparencyRenderTargetDWFalse) {\n                this.transparencyRenderTargetDWFalse.dispose();\n                this.transparencyRenderTargetDWFalse = null;\n            }\n            if (this.transparencyRenderTargetDWTrue) {\n                this.transparencyRenderTargetDWTrue.dispose();\n                this.transparencyRenderTargetDWTrue = null;\n            }\n            if (this.depthCopyPass) {\n                this.depthCopyPass.dispose();\n                this.depthCopyPass = null;\n            }\n        }\n    }\n    renderTransparency(renderer) {\n        const oldBackground = this.scene.background;\n        const oldClearColor = renderer.getClearColor(new three__WEBPACK_IMPORTED_MODULE_0__.Color());\n        const oldClearAlpha = renderer.getClearAlpha();\n        const oldVisibility = new Map();\n        const oldAutoClearDepth = renderer.autoClearDepth;\n        this.scene.traverse((obj)=>{\n            oldVisibility.set(obj, obj.visible);\n        });\n        // Override the state\n        this.scene.background = null;\n        renderer.autoClearDepth = false;\n        renderer.setClearColor(new three__WEBPACK_IMPORTED_MODULE_0__.Color(0, 0, 0), 0);\n        this.depthCopyPass.material.uniforms.depthTexture.value = this.beautyRenderTarget.depthTexture;\n        this.depthCopyPass.material.uniforms.reverseDepthBuffer.value = this.configuration.depthBufferType === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse;\n        // Render out transparent objects WITHOUT depth write\n        renderer.setRenderTarget(this.transparencyRenderTargetDWFalse);\n        this.scene.traverse((obj)=>{\n            if (obj.material) obj.visible = oldVisibility.get(obj) && (obj.material.transparent && !obj.material.depthWrite && !obj.userData.treatAsOpaque || !!obj.userData.cannotReceiveAO);\n        });\n        renderer.clear(true, true, true);\n        this.depthCopyPass.render(renderer);\n        renderer.render(this.scene, this.camera);\n        // Render out transparent objects WITH depth write\n        renderer.setRenderTarget(this.transparencyRenderTargetDWTrue);\n        this.scene.traverse((obj)=>{\n            if (obj.material) obj.visible = oldVisibility.get(obj) && obj.material.transparent && obj.material.depthWrite && !obj.userData.treatAsOpaque;\n        });\n        renderer.clear(true, true, true);\n        this.depthCopyPass.render(renderer);\n        renderer.render(this.scene, this.camera);\n        // Restore\n        this.scene.traverse((obj)=>{\n            obj.visible = oldVisibility.get(obj);\n        });\n        renderer.setClearColor(oldClearColor, oldClearAlpha);\n        this.scene.background = oldBackground;\n        renderer.autoClearDepth = oldAutoClearDepth;\n    }\n    configureSampleDependentPasses() {\n        this.firstFrame();\n        this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n        this.configureDenoisePass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n    }\n    configureAOPass(depthBufferType1 = $05f6997e4b65da14$export$ed4ee5d1e55474a5.Default, ortho = false) {\n        this.firstFrame();\n        this.samples = this.generateHemisphereSamples(this.configuration.aoSamples);\n        const e = {\n            ...(0, $1ed45968c1160c3c$export$c9b263b9a17dffd7)\n        };\n        e.fragmentShader = e.fragmentShader.replace(\"16\", this.configuration.aoSamples).replace(\"16.0\", this.configuration.aoSamples + \".0\");\n        if (depthBufferType1 === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Log) e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n        else if (depthBufferType1 === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse) e.fragmentShader = \"#define REVERSEDEPTH\\n\" + e.fragmentShader;\n        if (ortho) e.fragmentShader = \"#define ORTHO\\n\" + e.fragmentShader;\n        if (this.configuration.halfRes) e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n        if (this.effectShaderQuad) {\n            this.effectShaderQuad.material.dispose();\n            this.effectShaderQuad.material = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e);\n        } else this.effectShaderQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e));\n    }\n    configureDenoisePass(depthBufferType1 = $05f6997e4b65da14$export$ed4ee5d1e55474a5.Default, ortho = false) {\n        this.firstFrame();\n        this.samplesDenoise = this.generateDenoiseSamples(this.configuration.denoiseSamples, 11);\n        const p = {\n            ...(0, $e52378cd0f5a973d$export$57856b59f317262e)\n        };\n        p.fragmentShader = p.fragmentShader.replace(\"16\", this.configuration.denoiseSamples);\n        if (depthBufferType1 === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Log) p.fragmentShader = \"#define LOGDEPTH\\n\" + p.fragmentShader;\n        else if (depthBufferType1 === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse) p.fragmentShader = \"#define REVERSEDEPTH\\n\" + p.fragmentShader;\n        if (ortho) p.fragmentShader = \"#define ORTHO\\n\" + p.fragmentShader;\n        if (this.poissonBlurQuad) {\n            this.poissonBlurQuad.material.dispose();\n            this.poissonBlurQuad.material = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(p);\n        } else this.poissonBlurQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(p));\n    }\n    configureEffectCompositer(depthBufferType1 = $05f6997e4b65da14$export$ed4ee5d1e55474a5.Default, ortho = false) {\n        this.firstFrame();\n        const e = {\n            ...(0, $12b21d24d1192a04$export$a815acccbd2c9a49)\n        };\n        if (depthBufferType1 === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Log) e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n        else if (depthBufferType1 === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse) e.fragmentShader = \"#define REVERSEDEPTH\\n\" + e.fragmentShader;\n        if (ortho) e.fragmentShader = \"#define ORTHO\\n\" + e.fragmentShader;\n        if (this.configuration.halfRes && this.configuration.depthAwareUpsampling) e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n        if (this.effectCompositerQuad) {\n            this.effectCompositerQuad.material.dispose();\n            this.effectCompositerQuad.material = new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e);\n        } else this.effectCompositerQuad = new (0, $e4ca8dcb0218f846$export$dcd670d73db751f5)(new three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial(e));\n    }\n    /**\n         * \n         * @param {Number} n \n         * @returns {THREE.Vector3[]}\n         */ generateHemisphereSamples(n) {\n        const points = [];\n        for(let k = 0; k < n; k++){\n            const theta = 2.399963 * k;\n            let r = Math.sqrt(k + 0.5) / Math.sqrt(n);\n            const x = r * Math.cos(theta);\n            const y = r * Math.sin(theta);\n            // Project to hemisphere\n            const z = Math.sqrt(1 - (x * x + y * y));\n            points.push(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(x, y, z));\n        }\n        return points;\n    }\n    /**\n         * \n         * @param {number} numSamples \n         * @param {number} numRings \n         * @returns {THREE.Vector2[]}\n         */ generateDenoiseSamples(numSamples, numRings) {\n        const angleStep = 2 * Math.PI * numRings / numSamples;\n        const invNumSamples = 1.0 / numSamples;\n        const radiusStep = invNumSamples;\n        const samples = [];\n        let radius = invNumSamples;\n        let angle = 0;\n        for(let i = 0; i < numSamples; i++){\n            samples.push(new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(Math.cos(angle), Math.sin(angle)).multiplyScalar(Math.pow(radius, 0.75)));\n            radius += radiusStep;\n            angle += angleStep;\n        }\n        return samples;\n    }\n    setSize(width, height) {\n        this.firstFrame();\n        this.width = width;\n        this.height = height;\n        const c = this.configuration.halfRes ? 0.5 : 1;\n        this.beautyRenderTarget.setSize(width, height);\n        this.writeTargetInternal.setSize(width * c, height * c);\n        this.readTargetInternal.setSize(width * c, height * c);\n        this.accumulationRenderTarget.setSize(width * c, height * c);\n        if (this.configuration.halfRes) this.depthDownsampleTarget.setSize(width * c, height * c);\n        if (this.configuration.transparencyAware) {\n            this.transparencyRenderTargetDWFalse.setSize(width, height);\n            this.transparencyRenderTargetDWTrue.setSize(width, height);\n        }\n    }\n    firstFrame() {\n        this.needsFrame = true;\n    }\n    render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n        if (renderer.capabilities.logarithmicDepthBuffer && this.configuration.depthBufferType !== $05f6997e4b65da14$export$ed4ee5d1e55474a5.Log || renderer.capabilities.reverseDepthBuffer && this.configuration.depthBufferType !== $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse) {\n            this.configuration.depthBufferType = renderer.capabilities.logarithmicDepthBuffer ? $05f6997e4b65da14$export$ed4ee5d1e55474a5.Log : renderer.capabilities.reverseDepthBuffer ? $05f6997e4b65da14$export$ed4ee5d1e55474a5.Reverse : $05f6997e4b65da14$export$ed4ee5d1e55474a5.Default;\n            this.configureAOPass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n            this.configureDenoisePass(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n            this.configureEffectCompositer(this.configuration.depthBufferType, this.camera.isOrthographicCamera);\n        }\n        this.detectTransparency();\n        this.camera.updateMatrixWorld();\n        if (this.lastViewMatrix.equals(this.camera.matrixWorldInverse) && this.lastProjectionMatrix.equals(this.camera.projectionMatrix) && this.configuration.accumulate && !this.needsFrame) this.frame++;\n        else {\n            if (this.configuration.accumulate) {\n                renderer.setRenderTarget(this.accumulationRenderTarget);\n                renderer.clear(true, true, true);\n            }\n            this.frame = 0;\n            this.needsFrame = false;\n        }\n        this.lastViewMatrix.copy(this.camera.matrixWorldInverse);\n        this.lastProjectionMatrix.copy(this.camera.projectionMatrix);\n        let gl;\n        let ext;\n        let timerQuery;\n        if (this.debugMode) {\n            gl = renderer.getContext();\n            ext = gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n            if (ext === null) {\n                console.error(\"EXT_disjoint_timer_query_webgl2 not available, disabling debug mode.\");\n                this.debugMode = false;\n            }\n        }\n        if (this.configuration.autoRenderBeauty) {\n            renderer.setRenderTarget(this.beautyRenderTarget);\n            renderer.render(this.scene, this.camera);\n            if (this.configuration.transparencyAware) this.renderTransparency(renderer);\n        }\n        if (this.debugMode) {\n            timerQuery = gl.createQuery();\n            gl.beginQuery(ext.TIME_ELAPSED_EXT, timerQuery);\n        }\n        const xrEnabled = renderer.xr.enabled;\n        renderer.xr.enabled = false;\n        this._r.set(this.width, this.height);\n        let trueRadius = this.configuration.aoRadius;\n        if (this.configuration.halfRes && this.configuration.screenSpaceRadius) trueRadius *= 0.5;\n        if (this.frame < 1024 / this.configuration.aoSamples) {\n            if (this.configuration.halfRes) {\n                renderer.setRenderTarget(this.depthDownsampleTarget);\n                this.depthDownsampleQuad.material.uniforms.sceneDepth.value = this.beautyRenderTarget.depthTexture;\n                this.depthDownsampleQuad.material.uniforms.resolution.value = this._r;\n                this.depthDownsampleQuad.material.uniforms[\"near\"].value = this.camera.near;\n                this.depthDownsampleQuad.material.uniforms[\"far\"].value = this.camera.far;\n                this.depthDownsampleQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n                this.depthDownsampleQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n                this.depthDownsampleQuad.material.uniforms[\"logDepth\"].value = this.configuration.depthBufferType === $05f6997e4b65da14$export$ed4ee5d1e55474a5.Log;\n                this.depthDownsampleQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n                this.depthDownsampleQuad.render(renderer);\n            }\n            this.effectShaderQuad.material.uniforms[\"sceneDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.effectShaderQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[0] : this.beautyRenderTarget.depthTexture;\n            this.effectShaderQuad.material.uniforms[\"sceneNormal\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[1] : null;\n            this.effectShaderQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n            this.effectShaderQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n            this.effectShaderQuad.material.uniforms[\"projViewMat\"].value = this.camera.projectionMatrix.clone().multiply(this.camera.matrixWorldInverse.clone());\n            this.effectShaderQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n            this.effectShaderQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n            this.effectShaderQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n            this.effectShaderQuad.material.uniforms[\"biasAdjustment\"].value = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(this.configuration.biasOffset, this.configuration.biasMultiplier);\n            this.effectShaderQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(0.5).floor() : this._r;\n            this.effectShaderQuad.material.uniforms[\"time\"].value = performance.now() / 1000;\n            this.effectShaderQuad.material.uniforms[\"samples\"].value = this.samples;\n            this.effectShaderQuad.material.uniforms[\"bluenoise\"].value = this.bluenoise;\n            this.effectShaderQuad.material.uniforms[\"radius\"].value = trueRadius;\n            this.effectShaderQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n            this.effectShaderQuad.material.uniforms[\"near\"].value = this.camera.near;\n            this.effectShaderQuad.material.uniforms[\"far\"].value = this.camera.far;\n            this.effectShaderQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n            this.effectShaderQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n            this.effectShaderQuad.material.uniforms[\"frame\"].value = this.frame;\n            // Start the AO\n            renderer.setRenderTarget(this.writeTargetInternal);\n            this.effectShaderQuad.render(renderer);\n            // End the AO\n            // Start the blur\n            for(let i = 0; i < this.configuration.denoiseIterations; i++){\n                [this.writeTargetInternal, this.readTargetInternal] = [\n                    this.readTargetInternal,\n                    this.writeTargetInternal\n                ];\n                this.poissonBlurQuad.material.uniforms[\"tDiffuse\"].value = this.readTargetInternal.texture;\n                this.poissonBlurQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[0] : this.beautyRenderTarget.depthTexture;\n                this.poissonBlurQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n                this.poissonBlurQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n                this.poissonBlurQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n                this.poissonBlurQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n                this.poissonBlurQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n                this.poissonBlurQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(0.5).floor() : this._r;\n                this.poissonBlurQuad.material.uniforms[\"time\"].value = performance.now() / 1000;\n                this.poissonBlurQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n                this.poissonBlurQuad.material.uniforms[\"radius\"].value = this.configuration.denoiseRadius * (this.configuration.halfRes ? 0.5 : 1);\n                this.poissonBlurQuad.material.uniforms[\"worldRadius\"].value = trueRadius;\n                this.poissonBlurQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n                this.poissonBlurQuad.material.uniforms[\"index\"].value = i;\n                this.poissonBlurQuad.material.uniforms[\"poissonDisk\"].value = this.samplesDenoise;\n                this.poissonBlurQuad.material.uniforms[\"near\"].value = this.camera.near;\n                this.poissonBlurQuad.material.uniforms[\"far\"].value = this.camera.far;\n                this.poissonBlurQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n                renderer.setRenderTarget(this.writeTargetInternal);\n                this.poissonBlurQuad.render(renderer);\n            }\n            renderer.setRenderTarget(this.accumulationRenderTarget);\n            const oldAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            this.accumulationQuad.material.uniforms[\"tDiffuse\"].value = this.writeTargetInternal.texture;\n            this.accumulationQuad.material.uniforms[\"frame\"].value = this.frame;\n            this.accumulationQuad.render(renderer);\n            renderer.autoClear = oldAutoClear;\n        }\n        // Now, we have the blurred AO in writeTargetInternal\n        // End the blur\n        // Start the composition\n        if (this.configuration.transparencyAware) {\n            this.effectCompositerQuad.material.uniforms[\"transparencyDWFalse\"].value = this.transparencyRenderTargetDWFalse.texture;\n            this.effectCompositerQuad.material.uniforms[\"transparencyDWTrue\"].value = this.transparencyRenderTargetDWTrue.texture;\n            this.effectCompositerQuad.material.uniforms[\"transparencyDWTrueDepth\"].value = this.transparencyRenderTargetDWTrue.depthTexture;\n            this.effectCompositerQuad.material.uniforms[\"transparencyAware\"].value = true;\n        }\n        this.effectCompositerQuad.material.uniforms[\"sceneDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.effectCompositerQuad.material.uniforms[\"sceneDepth\"].value = this.beautyRenderTarget.depthTexture;\n        this.effectCompositerQuad.material.uniforms[\"aoTones\"].value = this.configuration.aoTones;\n        this.effectCompositerQuad.material.uniforms[\"near\"].value = this.camera.near;\n        this.effectCompositerQuad.material.uniforms[\"far\"].value = this.camera.far;\n        this.effectCompositerQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n        this.effectCompositerQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n        this.effectCompositerQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n        this.effectCompositerQuad.material.uniforms[\"downsampledDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.textures[0] : this.beautyRenderTarget.depthTexture;\n        this.effectCompositerQuad.material.uniforms[\"resolution\"].value = this._r;\n        this.effectCompositerQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n        this.effectCompositerQuad.material.uniforms[\"intensity\"].value = this.configuration.intensity;\n        this.effectCompositerQuad.material.uniforms[\"renderMode\"].value = this.configuration.renderMode;\n        this.effectCompositerQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n        this.effectCompositerQuad.material.uniforms[\"radius\"].value = trueRadius;\n        this.effectCompositerQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n        this.effectCompositerQuad.material.uniforms[\"gammaCorrection\"].value = this.configuration.gammaCorrection;\n        this.effectCompositerQuad.material.uniforms[\"tDiffuse\"].value = this.accumulationRenderTarget.texture;\n        this.effectCompositerQuad.material.uniforms[\"color\"].value = this._c.copy(this.configuration.color).convertSRGBToLinear();\n        this.effectCompositerQuad.material.uniforms[\"colorMultiply\"].value = this.configuration.colorMultiply;\n        this.effectCompositerQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        this.effectCompositerQuad.material.uniforms[\"fog\"].value = !!this.scene.fog;\n        if (this.scene.fog) {\n            if (this.scene.fog.isFog) {\n                this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = false;\n                this.effectCompositerQuad.material.uniforms[\"fogNear\"].value = this.scene.fog.near;\n                this.effectCompositerQuad.material.uniforms[\"fogFar\"].value = this.scene.fog.far;\n            } else if (this.scene.fog.isFogExp2) {\n                this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = true;\n                this.effectCompositerQuad.material.uniforms[\"fogDensity\"].value = this.scene.fog.density;\n            } else console.error(`Unsupported fog type ${this.scene.fog.constructor.name} in SSAOPass.`);\n        }\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        this.effectCompositerQuad.render(renderer);\n        if (this.debugMode) {\n            gl.endQuery(ext.TIME_ELAPSED_EXT);\n            $05f6997e4b65da14$var$checkTimerQuery(timerQuery, gl, this);\n        }\n        renderer.xr.enabled = xrEnabled;\n    }\n    /**\n         * Enables the debug mode of the AO, meaning the lastTime value will be updated.\n         */ enableDebugMode() {\n        this.debugMode = true;\n    }\n    /**\n         * Disables the debug mode of the AO, meaning the lastTime value will not be updated.\n         */ disableDebugMode() {\n        this.debugMode = false;\n    }\n    /**\n         * Sets the display mode of the AO\n         * @param {\"Combined\" | \"AO\" | \"No AO\" | \"Split\" | \"Split AO\"} mode - The display mode. \n         */ setDisplayMode(mode) {\n        this.configuration.renderMode = [\n            \"Combined\",\n            \"AO\",\n            \"No AO\",\n            \"Split\",\n            \"Split AO\"\n        ].indexOf(mode);\n    }\n    /**\n         * \n         * @param {\"Performance\" | \"Low\" | \"Medium\" | \"High\" | \"Ultra\"} mode \n         */ setQualityMode(mode) {\n        if (mode === \"Performance\") {\n            this.configuration.aoSamples = 8;\n            this.configuration.denoiseSamples = 4;\n            this.configuration.denoiseRadius = 12;\n        } else if (mode === \"Low\") {\n            this.configuration.aoSamples = 16;\n            this.configuration.denoiseSamples = 4;\n            this.configuration.denoiseRadius = 12;\n        } else if (mode === \"Medium\") {\n            this.configuration.aoSamples = 16;\n            this.configuration.denoiseSamples = 8;\n            this.configuration.denoiseRadius = 12;\n        } else if (mode === \"High\") {\n            this.configuration.aoSamples = 64;\n            this.configuration.denoiseSamples = 8;\n            this.configuration.denoiseRadius = 6;\n        } else if (mode === \"Ultra\") {\n            this.configuration.aoSamples = 64;\n            this.configuration.denoiseSamples = 16;\n            this.configuration.denoiseRadius = 6;\n        }\n    }\n}\n\n\n\n//# sourceMappingURL=N8AO.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/n8ao/dist/N8AO.js\n");

/***/ })

};
;